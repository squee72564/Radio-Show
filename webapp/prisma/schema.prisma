// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  bio           String?

  // Streaming related MODELS
  streamSchedules StreamSchedule[]
  streamInstances StreamInstance[]
  streamArchives  StreamArchive[]

  // RBAC
  status Role @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model StreamSchedule {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Application Information
  status      ScheduleStatus @default(PENDING)
  submittedAt DateTime       @default(now())
  reviewedAt  DateTime?

  // Stream Metadata
  title       String
  description String   @default("No Description")
  tags        String[]

  startTime      DateTime
  endTime        DateTime
  startDate      DateTime
  endDate        DateTime
  rrule          String

  // Stream Credentials
  password    String

  StreamInstance StreamInstance[]
  streamArchives StreamArchive[]

  @@unique([id, password])
}

model StreamInstance {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  scheduledStart DateTime
  scheduledEnd   DateTime

  streamScheduleId String
  streamSchedule   StreamSchedule @relation(fields: [streamScheduleId], references: [id], onDelete: Cascade)

  streamArchives StreamArchive[]
}

model StreamArchive {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  streamScheduleId String
  streamSchedule   StreamSchedule @relation(fields: [streamScheduleId], references: [id], onDelete: Cascade)

  streamInstanceId String
  streamInstance   StreamInstance @relation(fields: [streamInstanceId], references: [id], onDelete: Cascade)

  url               String
  durationInSeconds Int?
  fileSizeBytes     Int?
  format            String?

  createdAt DateTime @default(now())
}

enum ScheduleStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  STREAMER
  ADMIN
  OWNER
}
